import Head from 'next/head';
import { useEffect, useReducer, useState } from 'react';
import { BiCheck, BiPlus } from 'react-icons/bi';
import { BiXCircle } from 'react-icons/bi';
import Table from '../components/table';
import { useSelector, useDispatch } from 'react-redux';
import { addAction, resetAction, successAction } from '../redux/toggleSlice';
import AddForm from '../components/addForm';
import UpdateForm from '../components/updateProductForm';
import api from '../pages/api/axios'
import { useRouter } from 'next/router'
import { resetDeleteId } from '../redux/reducer';
import Success from '../components/success';

const reducerFunction = (state, action) => {
 switch(action.type){
  case 'HANDLE_INPUT':
  return {
    ...state,
    [action.field]: action.payload,
  };
  case 'UPDATE_INPUT':
  return action.payload
  
  default: 
  return state;
 }

};

export default function Home() {

 
  const [formData, setFormData] = useReducer(reducerFunction, {});
  const [tableData, setTableData] = useState(null);
  const dispatch = useDispatch();
  const flag = useSelector((state) => state.toggleAction.client.flag);
  const baseURL = 'http://localhost:8080/';
  const deleteId = useSelector((state) => state.app.client.deleteId);
  const updateId = useSelector((state) => state.app.client.updateId);

  const router = useRouter()
  // let updated = Object.assign({}, updateFormData, updateId)
  const handleText = (e) => 
    { 
      setFormData({
      type: "HANDLE_INPUT",
      field: e.target.name,
      payload: e.target.value

    })}
   
 
  //fetching Data
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get(baseURL)
        setTableData(response.data)
      
      } catch (err) {
        if(err.response){
          console.log(err.response.data);
          console.log(err.response.status);
          console.log(err.response.headers);
        } else {
          console.log(`Error: ${err.message}`);
        }
      }
    }
    fetchData()
  },[])
   
  
  

    // Posting data
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (Object.keys(formData).length == 0) return console.log('no form data');
  try {
    const response =  await api
    .post(baseURL, {
      code: formData.code,
      category: formData.category,
      qmade: formData.qmade,
      price: formData.price,
      cost: formData.cost,
    })
    const allData = [...tableData, response.data]
    setTableData(allData)
    
    dispatch(successAction())
    setTimeout(() => dispatch(resetAction()), 2000)
  } catch (error) {
    console.log(`Error: ${error.message}`);
  }  
  };

  
 // Deleting data
 const handleDelete = async () => {
    try { 
      await api.delete(`/?productId=${deleteId}`)
      const dataList =  tableData.filter( item => item.deleteId !== deleteId)
      setTableData(dataList)
      const response = await api.get(baseURL)
      setTableData(response.data)
      router.push('/')
      dispatch(resetDeleteId())
      
      } catch (err) {
        console.log(`Error: ${err.message}`);
      }
} 
  //updating data
  useEffect( () => {
    handleUpdate()
  },[])

  const handleUpdate =  () => {
    updateId?
    setFormData({
      type: "UPDATE_INPUT",
      payload: updateId
    }) : <></>
  }

  const updateHandler = async () => {

    try {
      let updated = Object.assign({},updateId, formData)
      console.log(updated);
      await api.put(`/?productId=${formData._id}`, updated)
    

    } catch (error) {
      console.log(`Error: ${error.message}`);
    }
  
  }
   
 console.log(formData);
 
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className=" text-5xl font-semibold pl-5 py-8">
          Inventory Management
        </div>
       <div>
         </div>
        <div className="container mx-auto flex justify-between py-5 border-b">
          <div className=" flex w-full justify-between">
            <div>
              <button
                onClick={() => dispatch(addAction())}
                className="flex bg-indigo-500 text-white px-4 py-2 border rounded-md hover:bg-gray-50 hover:border-indigo-500 hover:text-gray-800"
              >
                Add new product{' '}
                <span className="px-1">
                  <BiPlus size={23}></BiPlus>
                </span>
              </button>
            </div>
            {flag > 0 ? (
              <BiXCircle
                className=" cursor-pointer text-2xl hover:text-4xl"
                onClick={() => dispatch(resetAction())}
              />
            ) : (
              <></>
            )}
          </div>
        </div>
        {flag == 1 ? <AddForm  handleSubmit={handleSubmit} handleText={handleText} /> : flag == 2 ? <UpdateForm formData={formData}  handleText={handleText}  updateHandler={updateHandler}/> : flag ==3 ? <Success message={'Product added'} /> : <></>}
       
        <div className="relative container mx-auto">
        { deleteId ? (
          <div className=' float-right w-40 h-20  p-2 space-y-1'>
          <div>
            <h1 className='text-xl'>Are you sure ?</h1>
          </div>
          <div className=' text-center space-x-4'>
          <button className=' bg-red-500 text-white p-1 rounded-md' onClick={handleDelete}>Yes</button>
          <button className=' bg-green-500 text-white p-1 rounded-md' onClick={() =>dispatch(resetDeleteId())}>No</button>
       </div>
       </div>
       ) : <></>}
     
       <Table tableData={tableData} setTableData={setTableData} handleUpdate={handleUpdate}/>
    
        </div>
      </main>
    </>
  );
}
